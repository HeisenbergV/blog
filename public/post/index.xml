<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on heisenberg blog</title>
    <link>https://heisenbergv.github.io/post/</link>
    <description>Recent content in Posts on heisenberg blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 12 Sep 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://heisenbergv.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读CSAPP(3) - 存储器层次结构</title>
      <link>https://heisenbergv.github.io/post/2019/20190915-csapp3/</link>
      <pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190915-csapp3/</guid>
      <description>了解硬件 随机访问存储器（Random-Access Memory，RAM） RAM分两类，静态（SRAM）的和动态的（DRAM），SRAM要比D</description>
    </item>
    
    <item>
      <title>读CSAPP(2) - 程序性能优化</title>
      <link>https://heisenbergv.github.io/post/2019/20190909-csapp2/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190909-csapp2/</guid>
      <description>高效的程序需要做到 合适的数据结构与算法 编写出编译器能够有效优化以转换成高效可执行代码的源码。 将运算量特别大的计算，可以分成多部分，这些部分可</description>
    </item>
    
    <item>
      <title>Go 竞态问题</title>
      <link>https://heisenbergv.github.io/post/2019/20190903-go-race-condition/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190903-go-race-condition/</guid>
      <description>定义 单处理器中低优先级的进程被高优先级的进程抢占，同时他们访问同一块共享资源 多处理器中，CPU1的进程、CPU2的进程同时访问同一块共享资源</description>
    </item>
    
    <item>
      <title>读CSAPP(1) - 信息的表示和处理</title>
      <link>https://heisenbergv.github.io/post/2019/20190827-csapp1/</link>
      <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190827-csapp1/</guid>
      <description>计算机存的什么 计算机存储的是二进制，每一位存储的是0或1。大多数计算机使用1字节（也就是8位），作为最小可寻址的内存单位。 每个字节都有一个唯</description>
    </item>
    
    <item>
      <title>钢琴入门练习</title>
      <link>https://heisenbergv.github.io/post/2019/20190815-piano/</link>
      <pubDate>Fri, 23 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190815-piano/</guid>
      <description>练习曲1 提取码: gu7d</description>
    </item>
    
    <item>
      <title>暗时间</title>
      <link>https://heisenbergv.github.io/post/2019/20190821-%E6%9A%97%E6%97%B6%E9%97%B4/</link>
      <pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/20190821-%E6%9A%97%E6%97%B6%E9%97%B4/</guid>
      <description>学习方面 最近看《暗时间》这本书，感觉很不错。 投入的时间≠实际时间，要用高效的方法学习，充分利用暗时间，学习过程要不断思考推断，而不是一味的死</description>
    </item>
    
    <item>
      <title>2019年下半年计划</title>
      <link>https://heisenbergv.github.io/post/2019/2019-plan/</link>
      <pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2019/2019-plan/</guid>
      <description>理财 《小狗钱钱》 《穷爸爸富爸爸》 《解读基金》 《好好赚钱》 《指数基金投资指南》 读书 《百年孤独》 《暗时间》 《局外人》 《别做正常的傻瓜》 《稀缺》 技</description>
    </item>
    
    <item>
      <title>2020年计划</title>
      <link>https://heisenbergv.github.io/post/2020/2020-plan/</link>
      <pubDate>Mon, 01 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://heisenbergv.github.io/post/2020/2020-plan/</guid>
      <description>理财 《股票大作手回忆录》 《巴比伦最富有的人》 《滚雪球》 《聪明的投资者》 《穷查理宝典》 《战胜华尔街》 《漫步华尔街》 《财报就像一本故事书》 《巴菲</description>
    </item>
    
  </channel>
</rss>